{"version":3,"sources":["../assets/styles/tinymce.scss","../assets/styles/global/fn-measurement.scss","../assets/styles/global/variables.scss","../assets/styles/global/mx-font-size.scss","../assets/styles/global/mx-media-queries.scss"],"names":[],"mappings":"AAYA,aACI,gBCcgB,ADbhB,eEAoB,AFCpB,sDEA8D,AFC9D,gBEAmB,AFCnB,WEAuB,AFCvB,mCAAoC,AACpC,iCAAmC,CACtC,AAED,kBAMI,aAAc,AACd,uBCFgB,ADGhB,gBAAiB,AACjB,eAAiB,CACpB,AAED,GGlBY,iBFNQ,CD0BnB,AI3BO,yBJyBR,GGVwB,gBFdJ,CD0BnB,CAAA,AAED,GGtBY,gBFNQ,CD8BnB,AI/BO,yBJ6BR,GGdwB,iBFdJ,CD8BnB,CAAA,AAED,GG1BY,iBFNQ,CDkCnB,AInCO,yBJiCR,GGlBwB,eFdJ,CDkCnB,CAAA,AAED,GG9BY,aFNQ,CDsCnB,AIvCO,yBJqCR,GGtBwB,iBFdJ,CDsCnB,CAAA,AAED,GGtCY,gBFFQ,CD0CnB,AAED,GG1CY,eFFQ,CD8CnB","file":"tinymce.css","sourcesContent":["@import \"global/variables\";\n@import \"global/fn-math\";\n@import \"global/fn-measurement\";\n@import \"global/fn-color\";\n@import \"global/fn-z-index\";\n@import \"global/mx-clearfix\";\n@import \"global/mx-media-queries\";\n@import \"global/mx-grid-framework\";\n@import \"global/mx-link-states\";\n@import \"global/mx-font-size\";\n@import \"global/fonts\";\n\nbody#tinymce {\n    margin: rem(15px);\n    font-size: $base-font-size;\n    font-family: $base-font-family;\n    line-height: $base-line-height;\n    color: $base-font-color;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    margin-top: 0;\n    margin-bottom: rem(30px);\n    font-weight: 500;\n    line-height: 1.5;\n}\n\nh1 {\n    @include font-size('h1');\n}\n\nh2 {\n    @include font-size('h2');\n}\n\nh3 {\n    @include font-size('h3');\n}\n\nh4 {\n    @include font-size('h4');\n}\n\nh5 {\n    @include font-size('h5');\n}\n\nh6 {\n    @include font-size('h6');\n}\n","///\n/// Return EM value\n///\n/// @param {pixel} $px - Target equivalent pixel value to output as ems.\n/// @param {pixel} $base [$base-font-size] - Base pixel value to calculate against.\n///\n/// @require {variable} $base-config\n///\n@function em($px, $base: $base-font-size) {\n    @if type-of($px) == 'number' and not unitless($px) {\n        @return ($px / $base) * 1em;\n    } @else {\n        @warn '`em()` requires a number in `px` units.';\n        @return null;\n    }\n}\n\n///\n/// Return REM value\n///\n/// @param {pixel} $px - Target equivalent pixel value to output as rems.\n/// @param {pixel} $base [$base-font-size] - Base pixel value to calculate against.\n///\n/// @require {variable} $base-config\n///\n@function rem($px, $base: $base-font-size) {\n    @if type-of($px) == 'number' and not unitless($px) {\n        @return ($px / $base) * 1rem;\n    } @else {\n        @warn '`rem()` requires a number in `px` units.';\n        @return null;\n    }\n}\n","// Breakpoints\n///\n$breakpoints: (\n    xs: 480px,  // Extra Small devices (landscape phones, 480px and up)\n    sm: 768px,  // Small devices (tablets, 768px and up)\n    md: 1024px, // Medium devices (desktops, 1024px and up)\n    lg: 1200px, // Large devices (desktops, 1200px and up)\n    xl: 1500px  // Extra Lage devices (desktops, 1500px and up)\n);\n\n// Base global defaults\n///\n$base-columns:      12;\n$base-gutter:       30px;\n$base-font-size:    16px;\n$base-font-family:  \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n$base-line-height:  1.5;\n$base-font-color:   #000000;\n\n// Font sizes\n///\n$font-sizes: (\n    'h1': (\n        'initial':  22px,\n        'sm':       36px\n    ),\n    'h2': (\n        'initial':  20px,\n        'sm':       30px\n    ),\n    'h3': (\n        'initial':  18px,\n        'sm':       24px\n    ),\n    'h4': (\n        'initial':  16px,\n        'sm':       18px\n    ),\n    'h5':           14px,\n    'h6':           12px\n);\n\n// Column offsets\n//\n// Will enable the creation of column offset classes\n///\n$column-offsets: false;\n\n// Debug mode\n//\n// In order to use the debug mode you need to set the below variable to true\n// and you also need to set the THEME_DEBUG constant in the wp-config to true\n///\n$debug: false;\n\n// Colors Map for @function color();\n///\n$colors: (\n    'grey': (\n        'default':      #efefef,\n        'medium':       #e5e5e5\n    ),\n    'bigrigmedia': (\n        'orange':       #f6921e,\n        'grey':         #4d4d4d\n    )\n);\n\n// Alerts Map for @function alert();\n///\n$alerts: (\n    'success': (\n        'default':  #dff0d8,\n        'message':  #3c763d,\n        'border':   #d6e9c6\n    ),\n    'info': (\n        'default':  #d9edf7,\n        'message':  #31708f,\n        'border':   #bce8f1\n    ),\n    'warning': (\n        'default':  #fcf8e3,\n        'message':  #8a6d3b,\n        'border':   #faf2cc\n    ),\n    'error': (\n        'default':  #f2dede,\n        'message':  #a94442,\n        'border':   #ebcccc\n    )\n);\n\n// Social Networks Map for @function social();\n///\n$social-networks: (\n    facebook:   #3b5998,\n    twitter:    #00aced,\n    googleplus: #dd4b39,\n    linkedin:   #007bb6,\n    youtube:    #bb0000,\n    instagram:  #517fa4,\n    pinterest:  #cb2027,\n    flickr:     #ff0084,\n    tumblr:     #32506d,\n    foursquare: #0072b1,\n    dribble:    #ea4c89,\n    vine:       #00bf8f\n);\n\n// Z-index Map for @function z();\n///\n$z-index: (\n    debug: 1\n);\n","///\n// Font Sizes\n// @param  {string} $size Name of a font size set in $font-sizes.\n///\n@mixin font-size($size) {\n\n    @if map-has-key($font-sizes, $size) {\n\n        $font-size: map-get($font-sizes, $size);\n\n        @if type-of($font-size) == 'number' {\n\n            font-size: em(map-get($font-sizes, $size));\n\n        } @elseif type-of($font-size) == 'map' {\n\n            font-size: em(map-get($font-size, 'initial'));\n\n            @each $key, $value in $font-size {\n\n                @if $key != 'initial' {\n\n                    @include media(#{$key}) {\n\n                        font-size: em($value);\n\n                    }\n\n                }\n\n            }\n\n        } @else {\n\n            @warn \"`#{$size}` must be a string or map\";\n            @return null;\n\n        }\n\n    } @else {\n\n        @warn \"`#{$size}` does not have a value set in $font-sizes. (#{map-keys($font-sizes)})\";\n        @return null;\n\n    }\n\n}\n","///\n/// Media Queries\n///\n/// @param {string} $breakpoint - $key to use from $breakpoints\n///\n/// @require {variable} $breakpoints\n///\n@mixin media($breakpoint) {\n    @if map-has-key($breakpoints, $breakpoint) {\n        @media (min-width: #{map-get($breakpoints, $breakpoint)}) {\n            @content;\n        }\n    } @else {\n        @warn 'Couldn\\'t find a breakpoint named \\'#{$breakpoint}\\'.';\n    }\n}\n\n///\n/// Max Width Media Queries\n///\n/// @param {string} $breakpoint - $key to use from $breakpoints\n///\n/// @require {variable} $breakpoints\n///\n@mixin media-max($breakpoint) {\n    @if map-has-key($breakpoints, $breakpoint) {\n        @media (max-width: #{map-get($breakpoints, $breakpoint ) - 1}) {\n            @content;\n        }\n    } @else {\n        @warn 'Couldn\\'t find a breakpoint named \\'#{$breakpoint}\\'.';\n    }\n}\n"],"sourceRoot":"assets/styles/"}