{"version":3,"sources":["../assets/styles/tinymce.scss","../assets/styles/global/fn-measurement.scss","../assets/styles/global/variables.scss","../assets/styles/global/mx-font-size.scss"],"names":[],"mappings":"AAYA,aACE,gBCcc,ADbd,eEAsB,AFCtB,sDEAgE,AFChE,gBEAqB,AFCrB,WEAyB,AFCzB,mCAAoC,AACpC,iCAAmC,CACpC,AAED,kBAME,aAAc,AACd,gBAAiB,AACjB,eAAiB,CAClB,AAED,GGVM,cHWmC,CGFpC,AAPC,yBHQN,GGPQ,kDAAe,CAMlB,CAAA,AAHC,0BHIN,GGHQ,cHIuC,CGF1C,CAAA,AHKL,GGdM,cHemC,CGNpC,AAPC,yBHYN,GGXQ,kDAAe,CAMlB,CAAA,AAHC,0BHQN,GGPQ,cHQuC,CGN1C,CAAA,AHSL,GGlBM,cHmBmC,CGVpC,AAPC,yBHgBN,GGfQ,kDAAe,CAMlB,CAAA,AAHC,0BHYN,GGXQ,cHYuC,CGV1C,CAAA,AHaL,GGtBM,cHuBmC,CGdpC,AAPC,yBHoBN,GGnBQ,kDAAe,CAMlB,CAAA,AAHC,0BHgBN,GGfQ,cHgBuC,CGd1C,CAAA,AHiBL,GG1BM,cH2BmC,CGlBpC,AAPC,yBHwBN,GGvBQ,kDAAe,CAMlB,CAAA,AAHC,0BHoBN,GGnBQ,cHoBuC,CGlB1C,CAAA,AHqBL,GG9BM,cH+BmC,CGtBpC,AAPC,yBH4BN,GG3BQ,kDAAe,CAMlB,CAAA,AAHC,0BHwBN,GGvBQ,cHwBuC,CGtB1C,CAAA,AHyBL,EGlCM,cHmCmC,CG1BpC,AAPC,yBHgCN,EG/BQ,kDAAe,CAMlB,CAAA,AAHC,0BH4BN,EG3BQ,cH4BuC,CG1B1C,CAAA","file":"tinymce.css","sourcesContent":["@import \"global/variables\";\n@import \"global/fn-math\";\n@import \"global/fn-measurement\";\n@import \"global/fn-color\";\n@import \"global/fn-z-index\";\n@import \"global/mx-clearfix\";\n@import \"global/mx-media-queries\";\n@import \"global/mx-grid-framework\";\n@import \"global/mx-link-states\";\n@import \"global/mx-font-size\";\n@import \"global/fonts\";\n\nbody#tinymce {\n  margin: rem(15px);\n  font-size: $base-font-size;\n  font-family: $base-font-family;\n  line-height: $base-line-height;\n  color: $base-font-color;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-weight: 500;\n}\n\nh1 {\n  @include fluid-type(320px, 1200px, 38px, 40px);\n}\n\nh2 {\n  @include fluid-type(320px, 1200px, 30px, 32px);\n}\n\nh3 {\n  @include fluid-type(320px, 1200px, 26px, 28px);\n}\n\nh4 {\n  @include fluid-type(320px, 1200px, 22px, 24px);\n}\n\nh5 {\n  @include fluid-type(320px, 1200px, 18px, 20px);\n}\n\nh6 {\n  @include fluid-type(320px, 1200px, 14px, 16px);\n}\n\np {\n  @include fluid-type(320px, 1200px, 16px, 18px);\n}\n","///\n/// Return EM value\n///\n/// @param {pixel} $px - Target equivalent pixel value to output as ems.\n/// @param {pixel} $base [$base-font-size] - Base pixel value to calculate against.\n///\n/// @require {variable} $base-config\n///\n@function em($px, $base: $base-font-size) {\n  @if type-of($px) == 'number' and not unitless($px) {\n    @return ($px / $base) * 1em;\n  } @else {\n    @warn '`em()` requires a number in `px` units.';\n    @return null;\n  }\n}\n\n///\n/// Return REM value\n///\n/// @param {pixel} $px - Target equivalent pixel value to output as rems.\n/// @param {pixel} $base [$base-font-size] - Base pixel value to calculate against.\n///\n/// @require {variable} $base-config\n///\n@function rem($px, $base: $base-font-size) {\n  @if type-of($px) == 'number' and not unitless($px) {\n    @return ($px / $base) * 1rem;\n  } @else {\n    @warn '`rem()` requires a number in `px` units.';\n    @return null;\n  }\n}\n","// Breakpoints\n///\n$breakpoints: (\n  xs: 480px,  // Extra Small devices (landscape phones, 480px and up)\n  sm: 768px,  // Small devices (tablets, 768px and up)\n  md: 1024px, // Medium devices (desktops, 1024px and up)\n  lg: 1200px, // Large devices (desktops, 1200px and up)\n  xl: 1500px  // Extra Lage devices (desktops, 1500px and up)\n);\n\n// Base global defaults\n///\n$base-columns:      12;\n$base-gutter:       30px;\n$base-font-size:    16px;\n$base-font-family:  \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n$base-line-height:  1.5;\n$base-font-color:   #000000;\n\n// Column offsets\n//\n// Will enable the creation of column offset classes\n///\n$column-offsets: false;\n\n// Debug mode\n//\n// In order to use the debug mode you need to set the below variable to true\n// and you also need to set the THEME_DEBUG constant in the wp-config to true\n///\n$debug: false;\n\n// Colors Map for @function color();\n///\n$colors: (\n  'grey': (\n    'default':      #efefef,\n    'medium':       #e5e5e5\n  ),\n  'bigrigmedia': (\n    'orange':       #f6921e,\n    'grey':         #4d4d4d\n  )\n);\n\n// Alerts Map for @function alert();\n///\n$alerts: (\n  'success': (\n    'default':  #dff0d8,\n    'message':  #3c763d,\n    'border':   #d6e9c6\n  ),\n  'info': (\n    'default':  #d9edf7,\n    'message':  #31708f,\n    'border':   #bce8f1\n  ),\n  'warning': (\n    'default':  #fcf8e3,\n    'message':  #8a6d3b,\n    'border':   #faf2cc\n  ),\n  'error': (\n    'default':  #f2dede,\n    'message':  #a94442,\n    'border':   #ebcccc\n  )\n);\n\n// Social Networks Map for @function social();\n///\n$social-networks: (\n  facebook:   #3b5998,\n  twitter:    #00aced,\n  googleplus: #dd4b39,\n  linkedin:   #007bb6,\n  youtube:    #bb0000,\n  instagram:  #517fa4,\n  pinterest:  #cb2027,\n  flickr:     #ff0084,\n  tumblr:     #32506d,\n  foursquare: #0072b1,\n  dribble:    #ea4c89,\n  vine:       #00bf8f\n);\n\n// Z-index Map for @function z();\n///\n$z-index: (\n  debug: 1\n);\n","///\n/// Returns unitless number.\n///\n/// @param {size} $size\n///\n@function strip-unit($size) {\n  @return $size / ($size * 0 + 1);\n}\n\n///\n/// Returns fluid typography.\n///\n/// @param {min-vw} $min-vw {max-vw} $max-vw {min-font-size} $min-font-size {max-font-size} $max-font-size\n/// @link https://css-tricks.com/snippets/css/fluid-typography/\n///\n@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {\n  $u1: unit($min-vw);\n  $u2: unit($max-vw);\n  $u3: unit($min-font-size);\n  $u4: unit($max-font-size);\n\n  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {\n    & {\n      font-size: $min-font-size;\n\n      @media (min-width: $min-vw) {\n        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\n      }\n\n      @media (min-width: $max-vw) {\n        font-size: $max-font-size;\n      }\n    }\n  }\n}\n\n"],"sourceRoot":"assets/styles/"}